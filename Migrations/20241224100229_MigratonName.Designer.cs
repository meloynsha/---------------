// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using основа.Models;

#nullable disable

namespace основа.Migrations
{
    [DbContext(typeof(maContext))]
    [Migration("20241224100229_MigratonName")]
    partial class MigratonName
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("основа.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime")
                        .HasColumnName("booking_date");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int")
                        .HasColumnName("number_of_people");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("total_price");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BookingId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("основа.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("основа.Models.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .HasColumnType("int")
                        .HasColumnName("faq_id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("answer");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.HasKey("FaqId");

                    b.HasIndex("TourId");

                    b.ToTable("FAQs", (string)null);
                });

            modelBuilder.Entity("основа.Models.Guide", b =>
                {
                    b.Property<int>("GuideId")
                        .HasColumnType("int")
                        .HasColumnName("guide_id");

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("Languages")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("languages");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(2,1)")
                        .HasColumnName("rating");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("GuideId");

                    b.HasIndex("UserId");

                    b.ToTable("Guides");
                });

            modelBuilder.Entity("основа.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .HasColumnType("int")
                        .HasColumnName("image_id");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("url");

                    b.HasKey("ImageId");

                    b.HasIndex("TourId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("основа.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("booking_id");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("payment_method");

                    b.HasKey("PaymentId");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("основа.Models.Promotion", b =>
                {
                    b.Property<int>("PromotionId")
                        .HasColumnType("int")
                        .HasColumnName("promotion_id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime")
                        .HasColumnName("end_date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.HasKey("PromotionId");

                    b.HasIndex("TourId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("основа.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("Rating")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.Property<int?>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("основа.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("tour_id");

                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.HasKey("TourId");

                    b.HasIndex("CityId");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("основа.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("основа.Models.Booking", b =>
                {
                    b.HasOne("основа.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__Bookings__tour_i__4CA06362");

                    b.HasOne("основа.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Bookings__user_i__4D94879B");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("основа.Models.Faq", b =>
                {
                    b.HasOne("основа.Models.Tour", "Tour")
                        .WithMany("Faqs")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__FAQs__tour_id__5EBF139D");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("основа.Models.Guide", b =>
                {
                    b.HasOne("основа.Models.User", "User")
                        .WithMany("Guides")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Guides__user_id__49C3F6B7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("основа.Models.Image", b =>
                {
                    b.HasOne("основа.Models.Tour", "Tour")
                        .WithMany("Images")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__Images__tour_id__59063A47");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("основа.Models.Payment", b =>
                {
                    b.HasOne("основа.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK__Payments__bookin__5629CD9C");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("основа.Models.Promotion", b =>
                {
                    b.HasOne("основа.Models.Tour", "Tour")
                        .WithMany("Promotions")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__Promotion__tour___5BE2A6F2");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("основа.Models.Review", b =>
                {
                    b.HasOne("основа.Models.Tour", "Tour")
                        .WithMany("Reviews")
                        .HasForeignKey("TourId")
                        .HasConstraintName("FK__Reviews__tour_id__5165187F");

                    b.HasOne("основа.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Reviews__user_id__52593CB8");

                    b.Navigation("Tour");

                    b.Navigation("User");
                });

            modelBuilder.Entity("основа.Models.Tour", b =>
                {
                    b.HasOne("основа.Models.City", "City")
                        .WithMany("Tours")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Tours__city_id__46E78A0C");

                    b.Navigation("City");
                });

            modelBuilder.Entity("основа.Models.Booking", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("основа.Models.City", b =>
                {
                    b.Navigation("Tours");
                });

            modelBuilder.Entity("основа.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Faqs");

                    b.Navigation("Images");

                    b.Navigation("Promotions");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("основа.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Guides");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
